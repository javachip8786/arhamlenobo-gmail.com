import java.util.*;
import java.util.PriorityQueue; 
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.StringTokenizer;


/** Class for buffered reading int and double values */
class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                     new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            //TODO add check for eof if necessary
            tokenizer = new StringTokenizer(
                   reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }
	
    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
}

// node class is the basic structure 
// of each node present in the Huffman - tree. 
class HuffmanNode { 
	public static class Node{
		public int data;
		public String str;
		public Node left;
		public Node right;
		public Node() {
			
		}
		public Node(int val,String a) {
				data=val;
				str=a;
		}
	}
	
	
	public static int N;
	

	public static void downheapify(Node arr[], int i) 
	{ 
		if(N==0) {
			return;
		}
	    int largest = i; // Initialize largest as root 
	    int l = 2 * i ; // left = 2*i + 1 
	    int r = 2 * i +1; // right = 2*i + 2 
	  
	    if (l <= N && arr[l].data < arr[largest].data) 
	        largest = l; 
	  
	    if (r <= N && arr[r].data < arr[largest].data) 
	        largest = r; 
	  
	    if (largest != i) { 
	        int temp=arr[i].data;
	        arr[i].data=arr[largest].data;
	        arr[largest].data=temp;
	        downheapify(arr, largest); 
	    } 
	} 
	
	
	public static void upheapify(Node arr[],int i) {
		if(i==0) {
			return;
		}
		int largest = i; // Initialize largest as root 
	    int l = 2 * i ; // left = 2*i + 1 
	    int r = 2 * i +1; // right = 2*i + 2 
	  
	    if (l <= N && arr[l].data < arr[largest].data) 
	        largest = l; 
	  
	    if (r <= N && arr[r].data < arr[largest].data) 
	        largest = r;
	    int temp=arr[i].data;
	    arr[i].data=arr[largest].data;
	    arr[largest].data=temp;
	    upheapify(arr,i/2);
	    
	}
	
	public static void insert(Node ar[],Node nn )
    {
        N++;
        ar[N] = nn;
        upheapify(ar,N);
    }
	
	
	 public static Node  popout(Node ar[])
	    {	Node n = ar[1];
	        // swap with leaf
	        ar[1] = ar[N];
	        // disconnect the last node 
	        N--;
	        // downheapify on root
	        downheapify(ar, 1);
	        return n;
	    }

// comparator class helps to compare the node 
// on the basis of one of its attribute. 
// Here we will be compared 
// on the basis of data values of the nodes. 


	// recursive function to print the 
	// huffman-code through the tree traversal. 
	// Here s is the huffman - code generated. 
//	public static void printCode(HuffmanNode root, String s) 
//	{ 
//
//		// base case; if the left and right are null 
//		// then its a leaf node and we print 
//		// the code s generated by traversing the tree. 
//		if (root.left 
//				== null
//			&& root.right 
//				== null
//			&& Character.isLetter(root.c)) { 
//
//			// c is the character in the node 
//			System.out.println(root.c + ":" + s); 
//
//			return; 
//		} 
//
//		// if we go to left then add "0" to the code. 
//		// if we go to the right add"1" to the code. 
//
//		// recursive calls for left and 
//		// right sub-tree of the generated tree. 
//		printCode(root.left, s + "0"); 
//		printCode(root.right, s + "1"); 
//	} 
	 public static void dis(Node root,String s) {
			if(root.left==null && root.right==null) {
				System.out.println(s);
				return;
			}
			dis(root.left,s+"0");
			dis(root.right,s+"1");
		}

	// main function 
	public static void main(String[] args) throws IOException
	{ 
		Reader.init(System.in);

		
		// number of characters. 
		int n = Reader.nextInt(); 
		String input=Reader.next();
		Node arr[]=new Node[100005];
		// creating a priority queue q. 
		// makes a min-priority queue(min-heap). 
		
//		for (int i = 0; i < n; i++) { 
//
//			// creating a Huffman node object 
//			// and add it to the priority queue. 
//			HuffmanNode hn = new HuffmanNode(); 
//
//			hn.c = charArray[i]; 
//			hn.data = charfreq[i]; 
//
//			hn.left = null; 
//			hn.right = null; 
//
//			// add functions adds 
//			// the huffman node to the queue. 
//			q.add(hn); 
//		} 
		
		int SIZE=26;
	    
	    
		 // size of the string 'str' 
		 		int p = input.length(); 

		 		// 'freq[]' implemented as hash table 
		 		int[] freq = new int[SIZE]; 

		 		// accumulate freqeuncy of each character 
		 		// in 'str' 
		 		for (int i = 0; i < n; i++) 
		 			freq[input.charAt(i) - 'a']++; 

		 		// traverse 'str' from left to right 
		 		for (int i = 0; i < n; i++) { 
		 			
		 			// if frequency of character str.charAt(i) 
		 			// is not equal to 0 
		 			if (freq[input.charAt(i) - 'a'] != 0) { 

		 				// print the character along with its 
		 				// frequency 
		 				String s=String.valueOf( input.charAt(i)); 
		 				int h=freq[input.charAt(i) - 'a']; 
		 				
		 		    	Node nn = new Node(h,s);
		 		    	insert(arr,nn);
		 				// update frequency of str.charAt(i) to 
		 				// 0 so that the same character is not 
		 				// printed again 
		 				freq[input.charAt(i) - 'a'] = 0; 
		 			
		 			}
		 		}
		    
		
//		// create a root node 
//		HuffmanNode root = null; 
//
//		// Here we will extract the two minimum value 
//		// from the heap each time until 
//		// its size reduces to 1, extract until 
//		// all the nodes are extracted. 
//		while (q.size() > 1) { 
//
//			// first min extract. 
//			HuffmanNode x = q.peek(); 
//			q.poll(); 
//
//			// second min extarct. 
//			HuffmanNode y = q.peek(); 
//			q.poll(); 
//
//			// new node f which is equal 
//			HuffmanNode f = new HuffmanNode(); 
//
//			// to the sum of the frequency of the two nodes 
//			// assigning values to the f node. 
//			f.data = x.data + y.data; 
//			f.c = '-'; 
//
//			// first extracted node as left child. 
//			f.left = x; 
//
//			// second extracted node as the right child. 
//			f.right = y; 
//
//			// marking the f node as the root node. 
//			root = f; 
//
//			// add this node to the priority-queue. 
//			q.add(f); 
//		} 
//
//		// print the codes by traversing the tree 
//		printCode(root, ""); 
		 		 while(N>1) {
		 	    	Node n1=popout(arr);//4 a
		 	    	
		 	    	Node n2=popout(arr);//6 b
//		 	    	System.out.println(n1.data+"  "+n2.data);
		 	    	Node s=new Node(n1.data+n2.data,n1.str+n2.str);//10 ab
		 	    	
//		 	    	Node root=addnode(null,n1.data+n2.data,n1.str+n2.str);
		 	    	s.left=n1;
		 	    	s.right=n2;
		 	    	insert(arr,s);
		 	    }
		 	    
		 	    Node t=popout(arr);
//		 	    System.out.println(t.data);
		 	    dis(t,"");
		 	       
		 	    } 
	} 

// This code is contributed by Kunwar Desh Deepak Singh 
